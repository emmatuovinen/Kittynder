{"version":3,"sources":["catAPI.js","App.js","serviceWorker.js","index.js"],"names":["localhost","App","state","cat","indexOfCurrentCat","rightColumn","leftColumn","isLoading","componentDidMount","_this","nextCat","callback","setState","response","catUrl","url","Axios","get","then","data","putToColumnLeft","left","concat","Object","toConsumableArray","localStorage","setItem","JSON","stringify","putToColumnRight","right","react_default","a","createElement","className","src","this","alt","onClick","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSACIA,EAAY,wDC+DDC,6MA3DbC,MAAQ,CACNC,IAAK,GACLC,kBAAmB,EACnBC,YAAa,GACbC,WAAY,GACZC,WAAW,KAGbC,kBAAoB,WAClBC,EAAKC,aAGPA,QAAU,WDdL,IAAiBC,ECepBF,EAAKG,SAAS,CAACL,WAAU,IDfLI,ECgBZ,SAAAE,GACN,IAAIC,EAASD,EAAS,GAAGE,IACzBN,EAAKG,SAAS,CAAET,IAAKW,EAAQP,WAAW,KDhBzCS,IAAMC,IAAIjB,EADC,GACkBkB,KAAK,SAAAL,GAClCF,EAASE,EAASM,WCmBrBC,gBAAkB,SAACC,GACjBZ,EAAKC,UACL,IAAMP,EAAMM,EAAKP,MAAMC,IACvBM,EAAKG,SAAS,CAAEN,WAAU,CAAGH,GAAHmB,OAAAC,OAAAC,EAAA,EAAAD,CAAWd,EAAKP,MAAMI,eAChDmB,aAAaC,QAAQL,EAAMM,KAAKC,UAAUzB,OAG5C0B,iBAAmB,SAACC,GAClBrB,EAAKC,UACL,IAAMP,EAAMM,EAAKP,MAAMC,IACvBM,EAAKG,SAAS,CAAEP,YAAW,CAAGF,GAAHmB,OAAAC,OAAAC,EAAA,EAAAD,CAAWd,EAAKP,MAAMG,gBACjDoB,aAAaC,QAAQI,EAAOH,KAAKC,UAAUzB,6EAI3C,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAKC,KAAKlC,MAAMK,UAAW,6DAA8D6B,KAAKlC,MAAMC,IAAKkC,IAAI,SACpIN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQK,QAASF,KAAKhB,iBAAtB,gBACAW,EAAAC,EAAAC,cAAA,UAAQK,QAASF,KAAKP,kBAAtB,gBACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACGG,KAAKlC,MAAMI,WAAWiC,IAAI,SAAApC,GAAG,OAC5B4B,EAAAC,EAAAC,cAAA,WAAM9B,MAGV4B,EAAAC,EAAAC,cAAA,WACGG,KAAKlC,MAAMG,YAAYkC,IAAI,SAAApC,GAAG,OAC7B4B,EAAAC,EAAAC,cAAA,WAAM9B,gBAlDJqC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.7be54b12.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nvar localhost = \"https://api.thecatapi.com/v1/images/search?limit=\";\r\n\r\nexport function GetCats(callback) {\r\n    var limit = 1;\r\n     Axios.get(localhost + limit).then(response => {    \r\n     callback(response.data);\r\n   });\r\n   \r\n }","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {GetCats} from './catAPI';\n\nclass App extends Component {\n  state = {\n    cat: \"\",\n    indexOfCurrentCat: 0,\n    rightColumn: [],\n    leftColumn: [],\n    isLoading: true\n  };\n\n  componentDidMount = () => {\n    this.nextCat();\n};\n\n  nextCat = () => {\n    this.setState({isLoading:true})\n    GetCats(response => {\n      let catUrl = response[0].url;\n      this.setState({ cat: catUrl, isLoading: false});\n    });\n  };\n\n  putToColumnLeft = (left) => {\n    this.nextCat();\n    const cat = this.state.cat;\n    this.setState({ leftColumn: [cat, ...this.state.leftColumn] });\n    localStorage.setItem(left, JSON.stringify(cat));\n  };\n\n  putToColumnRight = (right) => {\n    this.nextCat();\n    const cat = this.state.cat;\n    this.setState({ rightColumn: [cat, ...this.state.rightColumn] });\n    localStorage.setItem(right, JSON.stringify(cat));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <img className=\"image\" src={this.state.isLoading? \"https://media.giphy.com/media/MTKsRM3QzNeOI59SbO/giphy.gif\" :this.state.cat} alt=\"logo\" />\n        <div>\n          <button onClick={this.putToColumnLeft}>‚ù§Ô∏è</button>\n          <button onClick={this.putToColumnRight}>üòª</button>\n          <div className=\"container\">\n            <div>\n              {this.state.leftColumn.map(cat => (\n                <div>{cat}</div>\n              ))}\n            </div>\n            <div>\n              {this.state.rightColumn.map(cat => (\n                <div>{cat}</div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}